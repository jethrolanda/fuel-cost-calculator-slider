{"version":3,"file":"src_components_EmailSettings_jsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA4C;AACP;AACiC;AASxD;AAC2B;AAYJ;AACkB;AAExC,SAASuB,aAAaA,CAAA,EAAG;EACtC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGzB,+CAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC0B,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG3B,+CAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAAC4B,IAAI,CAAC,GAAGtB,4CAAI,CAACuB,OAAO,CAAC,CAAC;EAE7B,MAAM,CAACC,GAAG,EAAEC,aAAa,CAAC,GAAGvB,4CAAY,CAACwB,eAAe,CAAC,CAAC;EAC3D,MAAMC,wBAAwB,GAAGA,CAACC,IAAI,EAAEC,OAAO,EAAEC,WAAW,KAAK;IAC/DN,GAAG,CAACI,IAAI,CAAC,CAAC;MACRC,OAAO;MACPC;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,QAAQ,GAAGf,wDAAW,CAAC,CAAC;EAE9B,IAAIgB,YAAY,GAAGjB,wDAAW,CAACR,yEAAkB,CAAC;EAClD,IAAI0B,aAAa,GAAGlB,wDAAW,CAACP,8DAAO,CAAC;EACxC,IAAI0B,UAAU,GAAGnB,wDAAW,CAACN,2DAAI,CAAC;EAClC,IAAI0B,QAAQ,GAAGpB,wDAAW,CAACL,yDAAE,CAAC;EAC9B,IAAI0B,SAAS,GAAGrB,wDAAW,CAACJ,0DAAG,CAAC;EAChC,IAAI0B,OAAO,GAAGtB,wDAAW,CAACT,6DAAM,CAAC;EAEjC,MAAMgC,OAAO,GAAG;IACdC,OAAO,EAAE,CACP,CAAC;MAAEC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK;IAAE,CAAC,CAAC,EAC3B,CAAC,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,YAAY,CAAC,EACvD,CACE;MAAEC,IAAI,EAAE;IAAU,CAAC,EACnB;MAAEA,IAAI,EAAE;IAAS,CAAC,CAAC,yCACpB,EACD,CAAC,MAAM,CAAC,CAAC;IACT;IAAA,CACD;;IACDC,SAAS,EAAE;MACTC,WAAW,EAAE;IACf;EACF,CAAC;EAED,MAAMC,OAAO,GAAG,CACd,QAAQ,EACR,MAAM,EACN,QAAQ,EACR,WAAW,EACX,QAAQ,EACR,YAAY,EACZ,MAAM,EACN,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,OAAO,CACR;EAED,MAAMC,gBAAgB,GAAG;IACvBC,QAAQ,EAAE,uBAAuB;IACjCC,KAAK,EAAE;MACLC,KAAK,EAAE;IACT;EACF,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,MAAM,GAAG5B,IAAI,CAAC6B,cAAc,CAAC,CAAC;IACpC,MAAMC,SAAS,GAAGF,MAAM,CAACzC,IAAI,CAAC4C,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;IAE1D,IAAIH,MAAM,CAAC1C,OAAO,KAAK,EAAE,IAAI4C,SAAS,KAAK,EAAE,EAAE;MAC7CzB,wBAAwB,CACtB,OAAO,EACP,OAAO,EACP,gCACF,CAAC;IACH,CAAC,MAAM,IAAIuB,MAAM,CAAC1C,OAAO,KAAK,EAAE,EAAE;MAChCmB,wBAAwB,CAAC,OAAO,EAAE,OAAO,EAAE,sBAAsB,CAAC;IACpE,CAAC,MAAM,IAAIyB,SAAS,KAAK,EAAE,EAAE;MAC3BzB,wBAAwB,CAAC,OAAO,EAAE,OAAO,EAAE,mBAAmB,CAAC;IACjE;EACF,CAAC;;EAED;EACA,MAAM2B,UAAU,GAAIC,MAAM,IAAK;IAC7BpC,cAAc,CAAC,IAAI,CAAC;IACpBY,QAAQ,CACNlB,0EAAe,CAAC;MACd0C,MAAM;MACNC,EAAE,EAAGC,IAAI,IAAK;QACZtC,cAAc,CAAC,KAAK,CAAC;QACrB,IAAIsC,IAAI,CAACC,MAAM,KAAK,SAAS,EAAE;UAC7B/B,wBAAwB,CACtB,SAAS,EACT,SAAS,EACT,qBACF,CAAC;QACH,CAAC,MAAM;UACLA,wBAAwB,CAAC,OAAO,EAAE,OAAO,EAAE8B,IAAI,EAAE5B,OAAO,CAAC;QAC3D;MACF;IACF,CAAC,CACH,CAAC;EACH,CAAC;;EAED;EACA,MAAM8B,iBAAiB,GAAGA,CAAC;IAAEX;EAAM,CAAC,KAAK;IACvC,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;MAChC3B,mBAAmB,CAAC,IAAI,CAAC;MACzBU,QAAQ,CACNjB,wEAAa,CAAC;QACZkC,KAAK;QACLQ,EAAE,EAAGC,IAAI,IAAK;UACZpC,mBAAmB,CAAC,KAAK,CAAC;UAC1B,IAAIoC,IAAI,CAACC,MAAM,KAAK,SAAS,EAAE;YAC7B/B,wBAAwB,CACtB,SAAS,EACT,SAAS,EACT,oBACF,CAAC;UACH,CAAC,MAAM;YACLA,wBAAwB,CAAC,OAAO,EAAE,OAAO,EAAE8B,IAAI,EAAE5B,OAAO,CAAC;UAC3D;QACF;MACF,CAAC,CACH,CAAC;IACH;EACF,CAAC;EAEDlC,gDAAS,CAAC,MAAM;IACd,IAAI0C,OAAO,KAAK,KAAK,EAAEN,QAAQ,CAACnB,2EAAgB,CAAC,CAAC,CAAC;EACrD,CAAC,EAAE,CAACyB,OAAO,CAAC,CAAC;EAEb1C,gDAAS,CAAC,MAAM;IACd2B,IAAI,CAACsC,cAAc,CAAC;MAClBrD,kBAAkB,EAAEyB,YAAY;MAChCxB,OAAO,EAAEyB,aAAa;MACtBxB,IAAI,EAAEyB,UAAU;MAChB2B,SAAS,EAAE1B,QAAQ;MACnB2B,UAAU,EAAE1B;IACd,CAAC,CAAC;EACJ,CAAC,EAAE,CAACH,aAAa,EAAEC,UAAU,EAAEC,QAAQ,CAAC,CAAC;EAEzC,OAAOE,OAAO,KAAK,KAAK,GACtB0B,oDAAA,CAAC1D,4CAAQ,MAAE,CAAC,GAEZ0D,oDAAA,CAAAC,2CAAA,QACGvC,aAAa,EACdsC,oDAAA,CAAC/D,4CAAI;IACHsB,IAAI,EAAEA,IAAK;IACX2C,MAAM,EAAC,UAAU;IACjBpB,gBAAgB,EAAEA,gBAAiB;IACnCqB,QAAQ,EAAGC,CAAC,IAAKb,UAAU,CAACa,CAAC,CAAE;IAC/BC,SAAS,EAAC;EAAgB,GAE1BL,oDAAA,CAAC3D,4CAAO;IAACiE,WAAW,EAAC,MAAM;IAACC,iBAAiB,EAAC;EAAG,GAAC,aAEzC,CAAC,EACVP,oDAAA,CAAC/D,4CAAI,CAACuE,IAAI;IACRC,KAAK,EAAC,wBAAwB;IAC9BC,IAAI,EAAC,oBAAoB;IACzBC,OAAO,EAAC;EAA6C,GAErDX,oDAAA,CAAC9D,4CAAK,MAAE,CACC,CAAC,EACZ8D,oDAAA,CAAC3D,4CAAO;IAACiE,WAAW,EAAC,MAAM;IAACC,iBAAiB,EAAC;EAAG,GAAC,gBAEzC,CAAC,EACVP,oDAAA,CAAC/D,4CAAI,CAACuE,IAAI;IACRC,KAAK,EAAC,SAAS;IACfC,IAAI,EAAC,SAAS;IACdE,KAAK,EAAE,CACL;MACE7B,QAAQ,EAAE;IACZ,CAAC;EACD,GAEFiB,oDAAA,CAAC9D,4CAAK,MAAE,CACC,CAAC,EACZ8D,oDAAA,CAAC/D,4CAAI,CAACuE,IAAI;IAACC,KAAK,EAAC;EAAI,GACnBT,oDAAA,CAAC/D,4CAAI,CAAC4E,IAAI;IAACH,IAAI,EAAC;EAAW,GACxB,CAACvB,MAAM,EAAE;IAAE2B,GAAG;IAAEC;EAAO,CAAC,KACvBf,oDAAA,CAAAC,2CAAA,QACGd,MAAM,CAAC6B,GAAG,CAAC,CAAC;IAAEC,GAAG;IAAEP,IAAI;IAAE,GAAGQ;EAAU,CAAC,KACtClB,oDAAA,CAAC5D,6CAAK;IACJ6E,GAAG,EAAEA,GAAI;IACTE,KAAK,EAAE;MACLC,OAAO,EAAE,MAAM;MACfC,YAAY,EAAE;IAChB,CAAE;IACFC,KAAK,EAAC;EAAU,GAEhBtB,oDAAA,CAAC/D,4CAAI,CAACuE,IAAI;IAAA,GACJU,SAAS;IACbC,KAAK,EAAE;MAAEI,IAAI,EAAE;IAAO,CAAE;IACxBb,IAAI,EAAE,CAACA,IAAI,EAAE,IAAI,CAAE;IACnBE,KAAK,EAAE,CAAC;MAAE/C,IAAI,EAAE;IAAQ,CAAC;EAAE,GAE3BmC,oDAAA,CAAC9D,4CAAK,MAAE,CACC,CAAC,EACZ8D,oDAAA,CAAClE,0DAAmB;IAAC0F,OAAO,EAAEA,CAAA,KAAMT,MAAM,CAACL,IAAI;EAAE,CAAE,CAC9C,CACR,CAAC,EACFV,oDAAA,CAAC/D,4CAAI,CAACuE,IAAI,QACRR,oDAAA,CAAChE,6CAAM;IACL6B,IAAI,EAAC,QAAQ;IACb2D,OAAO,EAAEA,CAAA,KAAMV,GAAG,CAAC,CAAE;IACrBW,KAAK;IACLC,IAAI,EAAE1B,oDAAA,CAACjE,0DAAY,MAAE;EAAE,GACxB,QAEO,CACC,CACX,CAEK,CACF,CAAC,EACZiE,oDAAA,CAAC/D,4CAAI,CAACuE,IAAI;IAACC,KAAK,EAAC;EAAK,GACpBT,oDAAA,CAAC/D,4CAAI,CAAC4E,IAAI;IAACH,IAAI,EAAC;EAAY,GACzB,CAACvB,MAAM,EAAE;IAAE2B,GAAG;IAAEC;EAAO,CAAC,KACvBf,oDAAA,CAAAC,2CAAA,QACGd,MAAM,CAAC6B,GAAG,CAAC,CAAC;IAAEC,GAAG;IAAEP,IAAI;IAAE,GAAGQ;EAAU,CAAC,KACtClB,oDAAA,CAAC5D,6CAAK;IACJ6E,GAAG,EAAEA,GAAI;IACTE,KAAK,EAAE;MACLC,OAAO,EAAE,MAAM;MACfC,YAAY,EAAE;IAChB,CAAE;IACFC,KAAK,EAAC;EAAU,GAEhBtB,oDAAA,CAAC/D,4CAAI,CAACuE,IAAI;IAAA,GACJU,SAAS;IACbC,KAAK,EAAE;MAAEI,IAAI,EAAE;IAAO,CAAE;IACxBb,IAAI,EAAE,CAACA,IAAI,EAAE,KAAK,CAAE;IACpBE,KAAK,EAAE,CAAC;MAAE/C,IAAI,EAAE;IAAQ,CAAC;EAAE,GAE3BmC,oDAAA,CAAC9D,4CAAK,MAAE,CACC,CAAC,EACZ8D,oDAAA,CAAClE,0DAAmB;IAAC0F,OAAO,EAAEA,CAAA,KAAMT,MAAM,CAACL,IAAI;EAAE,CAAE,CAC9C,CACR,CAAC,EACFV,oDAAA,CAAC/D,4CAAI,CAACuE,IAAI,QACRR,oDAAA,CAAChE,6CAAM;IACL6B,IAAI,EAAC,QAAQ;IACb2D,OAAO,EAAEA,CAAA,KAAMV,GAAG,CAAC,CAAE;IACrBW,KAAK;IACLC,IAAI,EAAE1B,oDAAA,CAACjE,0DAAY,MAAE;EAAE,GACxB,SAEO,CACC,CACX,CAEK,CACF,CAAC,EACZiE,oDAAA,CAAC/D,4CAAI,CAACuE,IAAI;IACRC,KAAK,EAAC,MAAM;IACZC,IAAI,EAAC,MAAM;IACXC,OAAO,EAAC,oHAAoH;IAC5HC,KAAK,EAAE,CACL;MACE7B,QAAQ,EAAE;IACZ,CAAC,EACD;MACEjB,OAAO,EAAE,mBAAmB;MAC5B6D,SAAS,EAAEA,CAACC,CAAC,EAAEC,KAAK,KAAK;QACvB,IAAIA,KAAK,CAACvC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,EAAE;UACtC,OAAOwC,OAAO,CAACC,OAAO,CAAC,CAAC;QAC1B,CAAC,MAAM;UACL,OAAOD,OAAO,CAACE,MAAM,CAAC,mBAAmB,CAAC;QAC5C;MACF;IACF,CAAC;EACD,GAEFhC,oDAAA,CAACnE,oDAAU;IACToG,KAAK,EAAC,MAAM;IACZ1D,OAAO,EAAEA,OAAQ;IACjBM,OAAO,EAAEA,OAAQ;IACjBqD,kBAAkB;EAAA,CACnB,CACQ,CAAC,EAEZlC,oDAAA,CAAC/D,4CAAI,CAACuE,IAAI;IAACC,KAAK,EAAC;EAAG,GAClBT,oDAAA,CAAChE,6CAAM;IACL6B,IAAI,EAAC,SAAS;IACdsE,QAAQ,EAAC,QAAQ;IACjBX,OAAO,EAAEA,CAAA,KAAMtC,UAAU,CAAC,CAAE;IAC5BkD,OAAO,EAAEjF;EAAY,GACtB,MAEO,CACC,CACP,CAAC,EACP6C,oDAAA,CAAC3D,4CAAO;IAACiE,WAAW,EAAC,MAAM;IAACC,iBAAiB,EAAC;EAAG,GAAC,mBAEzC,CAAC,EACVP,oDAAA,CAAC/D,4CAAI;IACHyE,IAAI,EAAC,OAAO;IACZ5B,gBAAgB,EAAEA,gBAAiB;IACnCqC,KAAK,EAAE;MACLC,OAAO,EAAE,MAAM;MACfiB,GAAG,EAAE;IACP,CAAE;IACFlC,QAAQ,EAAGC,CAAC,IAAKR,iBAAiB,CAACQ,CAAC;EAAE,GAEtCJ,oDAAA,CAAC/D,4CAAI,CAACuE,IAAI;IAACC,KAAK,EAAC,OAAO;IAACC,IAAI,EAAC,OAAO;IAACE,KAAK,EAAE,CAAC;MAAE/C,IAAI,EAAE;IAAQ,CAAC;EAAE,GAC/DmC,oDAAA,CAAC9D,4CAAK;IAACiF,KAAK,EAAE;MAAEmB,KAAK,EAAE;IAAQ;EAAE,CAAE,CAC1B,CAAC,EAEZtC,oDAAA,CAAC/D,4CAAI,CAACuE,IAAI,QACRR,oDAAA,CAAChE,6CAAM;IAAC6B,IAAI,EAAC,SAAS;IAACsE,QAAQ,EAAC,QAAQ;IAACC,OAAO,EAAE/E;EAAiB,GAAC,MAE5D,CACC,CACP,CACN,CACH;AACH","sources":["webpack://settings/./src/components/EmailSettings.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport {\n  Button,\n  Form,\n  Input,\n  notification,\n  Space,\n  Divider,\n  Skeleton\n} from \"antd\";\nimport \"react-quill/dist/quill.snow.css\";\n\nimport {\n  loaded,\n  modal_redirect_url,\n  subject,\n  body,\n  cc,\n  bcc,\n  fetchEmailValues,\n  saveEmailValues,\n  sendTestEmail\n} from \"../store/reducer/emailSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport default function EmailSettings() {\n  const [saveLoading, setSaveLoading] = useState(false);\n  const [testEmailLoading, setTestEmailLoading] = useState(false);\n  const [form] = Form.useForm();\n\n  const [api, contextHolder] = notification.useNotification();\n  const openNotificationWithIcon = (type, message, description) => {\n    api[type]({\n      message,\n      description\n    });\n  };\n\n  const dispatch = useDispatch();\n\n  let redirect_url = useSelector(modal_redirect_url);\n  let email_subject = useSelector(subject);\n  let email_body = useSelector(body);\n  let email_cc = useSelector(cc);\n  let email_bcc = useSelector(bcc);\n  let fetched = useSelector(loaded);\n\n  const modules = {\n    toolbar: [\n      [{ header: [1, 2, false] }],\n      [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\n      [\n        { list: \"ordered\" },\n        { list: \"bullet\" } /*, {'indent': '-1'}, {'indent': '+1'}*/\n      ],\n      [\"link\"] //'image'\n      // ['clean']\n    ],\n    clipboard: {\n      matchVisual: false\n    }\n  };\n\n  const formats = [\n    \"header\",\n    \"bold\",\n    \"italic\",\n    \"underline\",\n    \"strike\",\n    \"blockquote\",\n    \"list\",\n    \"bullet\",\n    \"indent\",\n    \"link\",\n    \"image\"\n  ];\n\n  const validateMessages = {\n    required: \"${label} is required!\",\n    types: {\n      email: \"The email is not valid!\"\n    }\n  };\n\n  const errorCheck = () => {\n    const fields = form.getFieldsValue();\n    const bodyValue = fields.body.replace(/(<([^>]+)>)/gi, \"\");\n\n    if (fields.subject === \"\" && bodyValue === \"\") {\n      openNotificationWithIcon(\n        \"error\",\n        \"Error\",\n        \"Subject and Body are required.\"\n      );\n    } else if (fields.subject === \"\") {\n      openNotificationWithIcon(\"error\", \"Error\", \"Subject is required.\");\n    } else if (bodyValue === \"\") {\n      openNotificationWithIcon(\"error\", \"Error\", \"Body is required.\");\n    }\n  };\n\n  // Save Email Setting\n  const formSubmit = (values) => {\n    setSaveLoading(true);\n    dispatch(\n      saveEmailValues({\n        values,\n        cb: (data) => {\n          setSaveLoading(false);\n          if (data.status === \"success\") {\n            openNotificationWithIcon(\n              \"success\",\n              \"Success\",\n              \"Successfully saved.\"\n            );\n          } else {\n            openNotificationWithIcon(\"error\", \"Error\", data?.message);\n          }\n        }\n      })\n    );\n  };\n\n  // Send Test Email\n  const formSendTestEmail = ({ email }) => {\n    if (typeof email !== \"undefined\") {\n      setTestEmailLoading(true);\n      dispatch(\n        sendTestEmail({\n          email,\n          cb: (data) => {\n            setTestEmailLoading(false);\n            if (data.status === \"success\") {\n              openNotificationWithIcon(\n                \"success\",\n                \"Success\",\n                \"Successfully sent.\"\n              );\n            } else {\n              openNotificationWithIcon(\"error\", \"Error\", data?.message);\n            }\n          }\n        })\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (fetched === false) dispatch(fetchEmailValues());\n  }, [fetched]);\n\n  useEffect(() => {\n    form.setFieldsValue({\n      modal_redirect_url: redirect_url,\n      subject: email_subject,\n      body: email_body,\n      cc_emails: email_cc,\n      bcc_emails: email_bcc\n    });\n  }, [email_subject, email_body, email_cc]);\n\n  return fetched === false ? (\n    <Skeleton />\n  ) : (\n    <>\n      {contextHolder}\n      <Form\n        form={form}\n        layout=\"vertical\"\n        validateMessages={validateMessages}\n        onFinish={(e) => formSubmit(e)}\n        className=\"email-settings\"\n      >\n        <Divider orientation=\"left\" orientationMargin=\"0\">\n          Modal Popup\n        </Divider>\n        <Form.Item\n          label=\"Redirect URL on submit\"\n          name=\"modal_redirect_url\"\n          tooltip=\"If empty, page will refresh after 1 second.\"\n        >\n          <Input />\n        </Form.Item>\n        <Divider orientation=\"left\" orientationMargin=\"0\">\n          Email Settings\n        </Divider>\n        <Form.Item\n          label=\"Subject\"\n          name=\"subject\"\n          rules={[\n            {\n              required: true\n            }\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item label=\"CC\">\n          <Form.List name=\"cc_emails\">\n            {(fields, { add, remove }) => (\n              <>\n                {fields.map(({ key, name, ...restField }) => (\n                  <Space\n                    key={key}\n                    style={{\n                      display: \"flex\",\n                      marginBottom: 8\n                    }}\n                    align=\"baseline\"\n                  >\n                    <Form.Item\n                      {...restField}\n                      style={{ flex: \"100%\" }}\n                      name={[name, \"cc\"]}\n                      rules={[{ type: \"email\" }]}\n                    >\n                      <Input />\n                    </Form.Item>\n                    <MinusCircleOutlined onClick={() => remove(name)} />\n                  </Space>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add CC\n                  </Button>\n                </Form.Item>\n              </>\n            )}\n          </Form.List>\n        </Form.Item>\n        <Form.Item label=\"BCC\">\n          <Form.List name=\"bcc_emails\">\n            {(fields, { add, remove }) => (\n              <>\n                {fields.map(({ key, name, ...restField }) => (\n                  <Space\n                    key={key}\n                    style={{\n                      display: \"flex\",\n                      marginBottom: 8\n                    }}\n                    align=\"baseline\"\n                  >\n                    <Form.Item\n                      {...restField}\n                      style={{ flex: \"100%\" }}\n                      name={[name, \"bcc\"]}\n                      rules={[{ type: \"email\" }]}\n                    >\n                      <Input />\n                    </Form.Item>\n                    <MinusCircleOutlined onClick={() => remove(name)} />\n                  </Space>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add BCC\n                  </Button>\n                </Form.Item>\n              </>\n            )}\n          </Form.List>\n        </Form.Item>\n        <Form.Item\n          label=\"Body\"\n          name=\"body\"\n          tooltip=\"Tags: {customer_name}, {customer_email}, {estimated_yearly_savings}, {salesperson_name} and {salesperson_position}\"\n          rules={[\n            {\n              required: true\n            },\n            {\n              message: \"Body is required!\",\n              validator: (_, value) => {\n                if (value.replace(/(<([^>]+)>)/gi, \"\")) {\n                  return Promise.resolve();\n                } else {\n                  return Promise.reject(\"Some message here\");\n                }\n              }\n            }\n          ]}\n        >\n          <ReactQuill\n            theme=\"snow\"\n            modules={modules}\n            formats={formats}\n            preserveWhitespace\n          />\n        </Form.Item>\n\n        <Form.Item label=\" \">\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            onClick={() => errorCheck()}\n            loading={saveLoading}\n          >\n            Save\n          </Button>\n        </Form.Item>\n      </Form>\n      <Divider orientation=\"left\" orientationMargin=\"0\">\n        Send a Test Email\n      </Divider>\n      <Form\n        name=\"basic\"\n        validateMessages={validateMessages}\n        style={{\n          display: \"flex\",\n          gap: \"10px\"\n        }}\n        onFinish={(e) => formSendTestEmail(e)}\n      >\n        <Form.Item label=\"Email\" name=\"email\" rules={[{ type: \"email\" }]}>\n          <Input style={{ width: \"400px\" }} />\n        </Form.Item>\n\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" loading={testEmailLoading}>\n            Send\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n"],"names":["useState","useEffect","ReactQuill","MinusCircleOutlined","PlusOutlined","Button","Form","Input","notification","Space","Divider","Skeleton","loaded","modal_redirect_url","subject","body","cc","bcc","fetchEmailValues","saveEmailValues","sendTestEmail","useSelector","useDispatch","EmailSettings","saveLoading","setSaveLoading","testEmailLoading","setTestEmailLoading","form","useForm","api","contextHolder","useNotification","openNotificationWithIcon","type","message","description","dispatch","redirect_url","email_subject","email_body","email_cc","email_bcc","fetched","modules","toolbar","header","list","clipboard","matchVisual","formats","validateMessages","required","types","email","errorCheck","fields","getFieldsValue","bodyValue","replace","formSubmit","values","cb","data","status","formSendTestEmail","setFieldsValue","cc_emails","bcc_emails","createElement","Fragment","layout","onFinish","e","className","orientation","orientationMargin","Item","label","name","tooltip","rules","List","add","remove","map","key","restField","style","display","marginBottom","align","flex","onClick","block","icon","validator","_","value","Promise","resolve","reject","theme","preserveWhitespace","htmlType","loading","gap","width"],"sourceRoot":""}