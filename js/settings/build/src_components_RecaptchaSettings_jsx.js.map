{"version":3,"file":"src_components_RecaptchaSettings_jsx.js","mappings":"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","sources":["webpack://settings/./src/components/RecaptchaSettings.jsx"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport { Button, Form, Input, notification, Divider, Skeleton } from 'antd';\n\nimport {\n  loaded,\n  siteKey,\n  secretKey,\n  fetchRecaptchaValues,\n  saveRecaptchaValues\n} from '../store/reducer/recaptchaSlice';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst RecaptchaSettings = () => {\n  const [loading, setLoading] = useState(false)\n  const [api, contextHolder] = notification.useNotification();\n  const openNotificationWithIcon = (type, message, description) => {\n    api[type]({\n      message,\n      description,\n    });\n  };\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  let fetched = useSelector(loaded);\n  let site_key = useSelector(siteKey);\n  let secret_key = useSelector(secretKey);\n  \n  const validateMessages = {\n    required: '${label} is required!'\n  };\n  \n  const formSubmit = (values) => {\n    setLoading(true);\n    dispatch(saveRecaptchaValues({values, cb: (data) => {\n      setLoading(false);\n      if(data.status==='success') {\n        openNotificationWithIcon('success', 'Success', 'Successfully saved.')\n      } else {\n        openNotificationWithIcon('error', 'Error', data?.message)\n      }\n    }}))\n  }\n\n  const errorCheck = () => {\n    const fields = form.getFieldsValue();\n\n    if(fields.site_key === \"\" && fields.secret_key === \"\"){\n      openNotificationWithIcon('error', 'Error', 'Site Key and Secret Key are required.')\n    } else if(fields.site_key === \"\") {\n      openNotificationWithIcon('error', 'Error', 'Site Key is required.')\n    } else if(fields.secret_key === \"\") {\n      openNotificationWithIcon('error', 'Error', 'Secret Key is required.')\n    }\n\n  }\n\n  useEffect(()=> {\n    if(fetched === false)\n      dispatch(fetchRecaptchaValues())\n  }, [fetched]);\n\n  useEffect(()=>{\n    form.setFieldsValue({\n      site_key, secret_key\n    });\n  }, [site_key, secret_key]);\n\n  return fetched === false ? <Skeleton /> : <>\n      {contextHolder}\n      <Divider orientation=\"left\" orientationMargin=\"0\">\n        Recaptcha Settings\n      </Divider>\n      <p>Create google recaptcha v2 api key in google and paste the site and secrey key in the form below. Link <a target=\"_blank\" href=\"https://developers.google.com/recaptcha/intro\">here</a>.</p>\n      <Form\n          form = {form}\n          layout=\"vertical\"\n          style={{\n            maxWidth: 600,\n          }}\n          validateMessages={validateMessages}\n          onFinish={(e)=>formSubmit(e)}\n        >\n          <Form.Item\n            label=\"Site Key\"\n            name=\"site_key\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input/>\n          </Form.Item>\n\n          <Form.Item\n            label=\"Secret Key\"\n            name=\"secret_key\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input/>\n          </Form.Item>\n\n          <Form.Item label=\" \">\n            <Button type=\"primary\" htmlType=\"submit\" onClick={()=>errorCheck()} loading={loading}>\n              Save\n            </Button>\n          </Form.Item>\n        </Form>\n    </>\n};\n\nexport default RecaptchaSettings;"],"names":["useState","useEffect","Button","Form","Input","notification","Divider","Skeleton","loaded","siteKey","secretKey","fetchRecaptchaValues","saveRecaptchaValues","useSelector","useDispatch","RecaptchaSettings","loading","setLoading","api","contextHolder","useNotification","openNotificationWithIcon","type","message","description","form","useForm","dispatch","fetched","site_key","secret_key","validateMessages","required","formSubmit","values","cb","data","status","errorCheck","fields","getFieldsValue","setFieldsValue","createElement","Fragment","orientation","orientationMargin","target","href","layout","style","maxWidth","onFinish","e","Item","label","name","rules","htmlType","onClick"],"sourceRoot":""}